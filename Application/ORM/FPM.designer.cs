#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FederalProjectManager.ORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FPM")]
	public partial class FPMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertParameterValue(ParameterValue instance);
    partial void UpdateParameterValue(ParameterValue instance);
    partial void DeleteParameterValue(ParameterValue instance);
    partial void InsertProjectStage(ProjectStage instance);
    partial void UpdateProjectStage(ProjectStage instance);
    partial void DeleteProjectStage(ProjectStage instance);
    partial void InsertStageParameter(StageParameter instance);
    partial void UpdateStageParameter(StageParameter instance);
    partial void DeleteStageParameter(StageParameter instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertGlobalSetting(GlobalSetting instance);
    partial void UpdateGlobalSetting(GlobalSetting instance);
    partial void DeleteGlobalSetting(GlobalSetting instance);
    partial void InsertProjectInfoView(ProjectInfoView instance);
    partial void UpdateProjectInfoView(ProjectInfoView instance);
    partial void DeleteProjectInfoView(ProjectInfoView instance);
    partial void InsertDictionaryView(DictionaryView instance);
    partial void UpdateDictionaryView(DictionaryView instance);
    partial void DeleteDictionaryView(DictionaryView instance);
    partial void InsertDictionary(Dictionary instance);
    partial void UpdateDictionary(Dictionary instance);
    partial void DeleteDictionary(Dictionary instance);
    partial void InsertProjectPivotView(ProjectPivotView instance);
    partial void UpdateProjectPivotView(ProjectPivotView instance);
    partial void DeleteProjectPivotView(ProjectPivotView instance);
    #endregion
		
		public FPMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FPMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FPMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FPMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customer
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectKindsView> ProjectKindsView
		{
			get
			{
				return this.GetTable<ProjectKindsView>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameter
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<ParameterValue> ParameterValue
		{
			get
			{
				return this.GetTable<ParameterValue>();
			}
		}
		
		public System.Data.Linq.Table<ProjectStage> ProjectStage
		{
			get
			{
				return this.GetTable<ProjectStage>();
			}
		}
		
		public System.Data.Linq.Table<CustomerContactView> CustomerContactView
		{
			get
			{
				return this.GetTable<CustomerContactView>();
			}
		}
		
		public System.Data.Linq.Table<StageParameter> StageParameter
		{
			get
			{
				return this.GetTable<StageParameter>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contact
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<GlobalSetting> GlobalSetting
		{
			get
			{
				return this.GetTable<GlobalSetting>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInfoView> ProjectInfoView
		{
			get
			{
				return this.GetTable<ProjectInfoView>();
			}
		}
		
		public System.Data.Linq.Table<DictionaryView> DictionaryView
		{
			get
			{
				return this.GetTable<DictionaryView>();
			}
		}
		
		public System.Data.Linq.Table<Dictionary> Dictionary
		{
			get
			{
				return this.GetTable<Dictionary>();
			}
		}
		
		public System.Data.Linq.Table<ProjectStatisticView> ProjectStatisticView
		{
			get
			{
				return this.GetTable<ProjectStatisticView>();
			}
		}
		
		public System.Data.Linq.Table<ActualProjectView> ActualProjectView
		{
			get
			{
				return this.GetTable<ActualProjectView>();
			}
		}
		
		public System.Data.Linq.Table<ProjectPivotView> ProjectPivotView
		{
			get
			{
				return this.GetTable<ProjectPivotView>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Note;
		
		private short _RowState;
		
		private EntitySet<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRowStateChanging(short value);
    partial void OnRowStateChanged();
    #endregion
		
		public Customer()
		{
			this._Contact = new EntitySet<Contact>(new Action<Contact>(this.attach_Contact), new Action<Contact>(this.detach_Contact));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowState", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short RowState
		{
			get
			{
				return this._RowState;
			}
			set
			{
				if ((this._RowState != value))
				{
					this.OnRowStateChanging(value);
					this.SendPropertyChanging();
					this._RowState = value;
					this.SendPropertyChanged("RowState");
					this.OnRowStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Contact", Storage="_Contact", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<Contact> Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				this._Contact.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contact(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Contact(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContactID;
		
		private string _Caption;
		
		private int _Type;
		
		private float _Progress;
		
		private System.DateTime _CrtDate;
		
		private short _Priority;
		
		private string _Note;
		
		private short _RowState;
		
		private string _ResponsiblePerson;
		
		private bool _IsInWork;
		
		private EntitySet<ProjectStage> _ProjectStage;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnProgressChanging(float value);
    partial void OnProgressChanged();
    partial void OnCrtDateChanging(System.DateTime value);
    partial void OnCrtDateChanged();
    partial void OnPriorityChanging(short value);
    partial void OnPriorityChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRowStateChanging(short value);
    partial void OnRowStateChanged();
    partial void OnResponsiblePersonChanging(string value);
    partial void OnResponsiblePersonChanged();
    partial void OnIsInWorkChanging(bool value);
    partial void OnIsInWorkChanged();
    #endregion
		
		public Project()
		{
			this._ProjectStage = new EntitySet<ProjectStage>(new Action<ProjectStage>(this.attach_ProjectStage), new Action<ProjectStage>(this.detach_ProjectStage));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int NOT NULL")]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(60)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Real NOT NULL")]
		public float Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrtDate", DbType="DateTime NOT NULL")]
		public System.DateTime CrtDate
		{
			get
			{
				return this._CrtDate;
			}
			set
			{
				if ((this._CrtDate != value))
				{
					this.OnCrtDateChanging(value);
					this.SendPropertyChanging();
					this._CrtDate = value;
					this.SendPropertyChanged("CrtDate");
					this.OnCrtDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="SmallInt NOT NULL")]
		public short Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(4000)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowState", DbType="SmallInt NOT NULL")]
		public short RowState
		{
			get
			{
				return this._RowState;
			}
			set
			{
				if ((this._RowState != value))
				{
					this.OnRowStateChanging(value);
					this.SendPropertyChanging();
					this._RowState = value;
					this.SendPropertyChanged("RowState");
					this.OnRowStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsiblePerson", DbType="NVarChar(255)")]
		public string ResponsiblePerson
		{
			get
			{
				return this._ResponsiblePerson;
			}
			set
			{
				if ((this._ResponsiblePerson != value))
				{
					this.OnResponsiblePersonChanging(value);
					this.SendPropertyChanging();
					this._ResponsiblePerson = value;
					this.SendPropertyChanged("ResponsiblePerson");
					this.OnResponsiblePersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInWork", DbType="Bit NOT NULL")]
		public bool IsInWork
		{
			get
			{
				return this._IsInWork;
			}
			set
			{
				if ((this._IsInWork != value))
				{
					this.OnIsInWorkChanging(value);
					this.SendPropertyChanging();
					this._IsInWork = value;
					this.SendPropertyChanged("IsInWork");
					this.OnIsInWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectStage", Storage="_ProjectStage", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectStage> ProjectStage
		{
			get
			{
				return this._ProjectStage;
			}
			set
			{
				this._ProjectStage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Project", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Project.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Project.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectStage(ProjectStage entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectStage(ProjectStage entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectKindsView")]
	public partial class ProjectKindsView
	{
		
		private int _Key;
		
		private string _Value;
		
		public ProjectKindsView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this._Key = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private short _ValueType;
		
		private EntitySet<ParameterValue> _ParameterValue;
		
		private EntitySet<StageParameter> _StageParameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueTypeChanging(short value);
    partial void OnValueTypeChanged();
    #endregion
		
		public Parameter()
		{
			this._ParameterValue = new EntitySet<ParameterValue>(new Action<ParameterValue>(this.attach_ParameterValue), new Action<ParameterValue>(this.detach_ParameterValue));
			this._StageParameter = new EntitySet<StageParameter>(new Action<StageParameter>(this.attach_StageParameter), new Action<StageParameter>(this.detach_StageParameter));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueType", DbType="SmallInt NOT NULL")]
		public short ValueType
		{
			get
			{
				return this._ValueType;
			}
			set
			{
				if ((this._ValueType != value))
				{
					this.OnValueTypeChanging(value);
					this.SendPropertyChanging();
					this._ValueType = value;
					this.SendPropertyChanged("ValueType");
					this.OnValueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_ParameterValue", Storage="_ParameterValue", ThisKey="ID", OtherKey="ParameterID")]
		public EntitySet<ParameterValue> ParameterValue
		{
			get
			{
				return this._ParameterValue;
			}
			set
			{
				this._ParameterValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_StageParameter", Storage="_StageParameter", ThisKey="ID", OtherKey="ParameterID")]
		public EntitySet<StageParameter> StageParameter
		{
			get
			{
				return this._StageParameter;
			}
			set
			{
				this._StageParameter.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParameterValue(ParameterValue entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_ParameterValue(ParameterValue entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = null;
		}
		
		private void attach_StageParameter(StageParameter entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_StageParameter(StageParameter entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParameterValue")]
	public partial class ParameterValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ParameterID;
		
		private string _Value;
		
		private EntityRef<Parameter> _Parameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParameterIDChanging(int value);
    partial void OnParameterIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ParameterValue()
		{
			this._Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="Int NOT NULL")]
		public int ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_ParameterValue", Storage="_Parameter", ThisKey="ParameterID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.ParameterValue.Remove(this);
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.ParameterValue.Add(this);
						this._ParameterID = value.ID;
					}
					else
					{
						this._ParameterID = default(int);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectStage")]
	public partial class ProjectStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _Name;
		
		private string _Note;
		
		private System.DateTime _CrtDate;
		
		private System.Nullable<int> _SortIndex;
		
		private System.Nullable<short> _ResponsibleRole;
		
		private short _StageState;
		
		private short _RowState;
		
		private bool _IsPublic;
		
		private EntitySet<StageParameter> _StageParameter;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCrtDateChanging(System.DateTime value);
    partial void OnCrtDateChanged();
    partial void OnSortIndexChanging(System.Nullable<int> value);
    partial void OnSortIndexChanged();
    partial void OnResponsibleRoleChanging(System.Nullable<short> value);
    partial void OnResponsibleRoleChanged();
    partial void OnStageStateChanging(short value);
    partial void OnStageStateChanged();
    partial void OnRowStateChanging(short value);
    partial void OnRowStateChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    #endregion
		
		public ProjectStage()
		{
			this._StageParameter = new EntitySet<StageParameter>(new Action<StageParameter>(this.attach_StageParameter), new Action<StageParameter>(this.detach_StageParameter));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(4000)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrtDate", DbType="DateTime NOT NULL")]
		public System.DateTime CrtDate
		{
			get
			{
				return this._CrtDate;
			}
			set
			{
				if ((this._CrtDate != value))
				{
					this.OnCrtDateChanging(value);
					this.SendPropertyChanging();
					this._CrtDate = value;
					this.SendPropertyChanged("CrtDate");
					this.OnCrtDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortIndex", DbType="Int")]
		public System.Nullable<int> SortIndex
		{
			get
			{
				return this._SortIndex;
			}
			set
			{
				if ((this._SortIndex != value))
				{
					this.OnSortIndexChanging(value);
					this.SendPropertyChanging();
					this._SortIndex = value;
					this.SendPropertyChanged("SortIndex");
					this.OnSortIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsibleRole", DbType="SmallInt")]
		public System.Nullable<short> ResponsibleRole
		{
			get
			{
				return this._ResponsibleRole;
			}
			set
			{
				if ((this._ResponsibleRole != value))
				{
					this.OnResponsibleRoleChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleRole = value;
					this.SendPropertyChanged("ResponsibleRole");
					this.OnResponsibleRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StageState", DbType="SmallInt NOT NULL")]
		public short StageState
		{
			get
			{
				return this._StageState;
			}
			set
			{
				if ((this._StageState != value))
				{
					this.OnStageStateChanging(value);
					this.SendPropertyChanging();
					this._StageState = value;
					this.SendPropertyChanged("StageState");
					this.OnStageStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowState", DbType="SmallInt NOT NULL")]
		public short RowState
		{
			get
			{
				return this._RowState;
			}
			set
			{
				if ((this._RowState != value))
				{
					this.OnRowStateChanging(value);
					this.SendPropertyChanging();
					this._RowState = value;
					this.SendPropertyChanged("RowState");
					this.OnRowStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectStage_StageParameter", Storage="_StageParameter", ThisKey="ID", OtherKey="ProjectStageID")]
		public EntitySet<StageParameter> StageParameter
		{
			get
			{
				return this._StageParameter;
			}
			set
			{
				this._StageParameter.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectStage", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectStage.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectStage.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StageParameter(StageParameter entity)
		{
			this.SendPropertyChanging();
			entity.ProjectStage = this;
		}
		
		private void detach_StageParameter(StageParameter entity)
		{
			this.SendPropertyChanging();
			entity.ProjectStage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerContactView")]
	public partial class CustomerContactView
	{
		
		private string _ID;
		
		private string _ParentID;
		
		private System.Nullable<int> _RealID;
		
		private string _Name;
		
		private string _FullName;
		
		private System.Nullable<bool> _IsSelectable;
		
		private System.Nullable<bool> _IsActive;
		
		public CustomerContactView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(255)")]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="VarChar(255)")]
		public string ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealID", DbType="Int")]
		public System.Nullable<int> RealID
		{
			get
			{
				return this._RealID;
			}
			set
			{
				if ((this._RealID != value))
				{
					this._RealID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSelectable", DbType="Bit")]
		public System.Nullable<bool> IsSelectable
		{
			get
			{
				return this._IsSelectable;
			}
			set
			{
				if ((this._IsSelectable != value))
				{
					this._IsSelectable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StageParameter")]
	public partial class StageParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectStageID;
		
		private int _ParameterID;
		
		private System.Nullable<double> _NumberValue;
		
		private string _StringValue;
		
		private System.Nullable<System.DateTime> _DateTimeValue;
		
		private System.DateTime _CrtDate;
		
		private EntityRef<Parameter> _Parameter;
		
		private EntityRef<ProjectStage> _ProjectStage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectStageIDChanging(int value);
    partial void OnProjectStageIDChanged();
    partial void OnParameterIDChanging(int value);
    partial void OnParameterIDChanged();
    partial void OnNumberValueChanging(System.Nullable<double> value);
    partial void OnNumberValueChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    partial void OnDateTimeValueChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeValueChanged();
    partial void OnCrtDateChanging(System.DateTime value);
    partial void OnCrtDateChanged();
    #endregion
		
		public StageParameter()
		{
			this._Parameter = default(EntityRef<Parameter>);
			this._ProjectStage = default(EntityRef<ProjectStage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStageID", DbType="Int NOT NULL")]
		public int ProjectStageID
		{
			get
			{
				return this._ProjectStageID;
			}
			set
			{
				if ((this._ProjectStageID != value))
				{
					if (this._ProjectStage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectStageIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectStageID = value;
					this.SendPropertyChanged("ProjectStageID");
					this.OnProjectStageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="Int NOT NULL")]
		public int ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberValue", DbType="Float")]
		public System.Nullable<double> NumberValue
		{
			get
			{
				return this._NumberValue;
			}
			set
			{
				if ((this._NumberValue != value))
				{
					this.OnNumberValueChanging(value);
					this.SendPropertyChanging();
					this._NumberValue = value;
					this.SendPropertyChanged("NumberValue");
					this.OnNumberValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringValue", DbType="NVarChar(4000)")]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeValue", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeValue
		{
			get
			{
				return this._DateTimeValue;
			}
			set
			{
				if ((this._DateTimeValue != value))
				{
					this.OnDateTimeValueChanging(value);
					this.SendPropertyChanging();
					this._DateTimeValue = value;
					this.SendPropertyChanged("DateTimeValue");
					this.OnDateTimeValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrtDate", DbType="DateTime NOT NULL")]
		public System.DateTime CrtDate
		{
			get
			{
				return this._CrtDate;
			}
			set
			{
				if ((this._CrtDate != value))
				{
					this.OnCrtDateChanging(value);
					this.SendPropertyChanging();
					this._CrtDate = value;
					this.SendPropertyChanged("CrtDate");
					this.OnCrtDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_StageParameter", Storage="_Parameter", ThisKey="ParameterID", OtherKey="ID", IsForeignKey=true)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.StageParameter.Remove(this);
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.StageParameter.Add(this);
						this._ParameterID = value.ID;
					}
					else
					{
						this._ParameterID = default(int);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectStage_StageParameter", Storage="_ProjectStage", ThisKey="ProjectStageID", OtherKey="ID", IsForeignKey=true)]
		public ProjectStage ProjectStage
		{
			get
			{
				return this._ProjectStage.Entity;
			}
			set
			{
				ProjectStage previousValue = this._ProjectStage.Entity;
				if (((previousValue != value) 
							|| (this._ProjectStage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectStage.Entity = null;
						previousValue.StageParameter.Remove(this);
					}
					this._ProjectStage.Entity = value;
					if ((value != null))
					{
						value.StageParameter.Add(this);
						this._ProjectStageID = value.ID;
					}
					else
					{
						this._ProjectStageID = default(int);
					}
					this.SendPropertyChanged("ProjectStage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CustomerID;
		
		private string _Name;
		
		private string _Position;
		
		private string _PhoneNumber;
		
		private string _Note;
		
		private short _RowState;
		
		private string _ExtPhoneNumber;
		
		private string _Email;
		
		private EntitySet<Project> _Project;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRowStateChanging(short value);
    partial void OnRowStateChanged();
    partial void OnExtPhoneNumberChanging(string value);
    partial void OnExtPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Contact()
		{
			this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowState", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short RowState
		{
			get
			{
				return this._RowState;
			}
			set
			{
				if ((this._RowState != value))
				{
					this.OnRowStateChanging(value);
					this.SendPropertyChanging();
					this._RowState = value;
					this.SendPropertyChanged("RowState");
					this.OnRowStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtPhoneNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ExtPhoneNumber
		{
			get
			{
				return this._ExtPhoneNumber;
			}
			set
			{
				if ((this._ExtPhoneNumber != value))
				{
					this.OnExtPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ExtPhoneNumber = value;
					this.SendPropertyChanged("ExtPhoneNumber");
					this.OnExtPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Project", Storage="_Project", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<Project> Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				this._Project.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Contact", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Contact.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Contact.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalSetting")]
	public partial class GlobalSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Parameter;
		
		private string _StringValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterChanging(string value);
    partial void OnParameterChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    #endregion
		
		public GlobalSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameter", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Parameter
		{
			get
			{
				return this._Parameter;
			}
			set
			{
				if ((this._Parameter != value))
				{
					this.OnParameterChanging(value);
					this.SendPropertyChanging();
					this._Parameter = value;
					this.SendPropertyChanged("Parameter");
					this.OnParameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringValue", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectInfoView")]
	public partial class ProjectInfoView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContactID;
		
		private string _CustomerFullName;
		
		private string _Caption;
		
		private int _Type;
		
		private float _Progress;
		
		private System.DateTime _CrtDate;
		
		private short _Priority;
		
		private string _Note;
		
		private short _RowState;
		
		private string _ResponsiblePerson;
		
		private bool _IsInWork;
		
		private System.Nullable<System.DateTime> _ProjectDeadlineDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnCustomerFullNameChanging(string value);
    partial void OnCustomerFullNameChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnProgressChanging(float value);
    partial void OnProgressChanged();
    partial void OnCrtDateChanging(System.DateTime value);
    partial void OnCrtDateChanged();
    partial void OnPriorityChanging(short value);
    partial void OnPriorityChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRowStateChanging(short value);
    partial void OnRowStateChanged();
    partial void OnResponsiblePersonChanging(string value);
    partial void OnResponsiblePersonChanged();
    partial void OnIsInWorkChanging(bool value);
    partial void OnIsInWorkChanged();
    partial void OnProjectDeadlineDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProjectDeadlineDateChanged();
    #endregion
		
		public ProjectInfoView()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerFullName", DbType="NVarChar(771) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CustomerFullName
		{
			get
			{
				return this._CustomerFullName;
			}
			set
			{
				if ((this._CustomerFullName != value))
				{
					this.OnCustomerFullNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerFullName = value;
					this.SendPropertyChanged("CustomerFullName");
					this.OnCustomerFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(60)", UpdateCheck=UpdateCheck.Never)]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Real NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public float Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrtDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CrtDate
		{
			get
			{
				return this._CrtDate;
			}
			set
			{
				if ((this._CrtDate != value))
				{
					this.OnCrtDateChanging(value);
					this.SendPropertyChanging();
					this._CrtDate = value;
					this.SendPropertyChanged("CrtDate");
					this.OnCrtDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowState", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short RowState
		{
			get
			{
				return this._RowState;
			}
			set
			{
				if ((this._RowState != value))
				{
					this.OnRowStateChanging(value);
					this.SendPropertyChanging();
					this._RowState = value;
					this.SendPropertyChanged("RowState");
					this.OnRowStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsiblePerson", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ResponsiblePerson
		{
			get
			{
				return this._ResponsiblePerson;
			}
			set
			{
				if ((this._ResponsiblePerson != value))
				{
					this.OnResponsiblePersonChanging(value);
					this.SendPropertyChanging();
					this._ResponsiblePerson = value;
					this.SendPropertyChanged("ResponsiblePerson");
					this.OnResponsiblePersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInWork", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsInWork
		{
			get
			{
				return this._IsInWork;
			}
			set
			{
				if ((this._IsInWork != value))
				{
					this.OnIsInWorkChanging(value);
					this.SendPropertyChanging();
					this._IsInWork = value;
					this.SendPropertyChanged("IsInWork");
					this.OnIsInWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDeadlineDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ProjectDeadlineDate
		{
			get
			{
				return this._ProjectDeadlineDate;
			}
			set
			{
				if ((this._ProjectDeadlineDate != value))
				{
					this.OnProjectDeadlineDateChanging(value);
					this.SendPropertyChanging();
					this._ProjectDeadlineDate = value;
					this.SendPropertyChanged("ProjectDeadlineDate");
					this.OnProjectDeadlineDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DictionaryView")]
	public partial class DictionaryView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Dictionary> _Dictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DictionaryView()
		{
			this._Dictionary = new EntitySet<Dictionary>(new Action<Dictionary>(this.attach_Dictionary), new Action<Dictionary>(this.detach_Dictionary));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(11) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DictionaryView_Dictionary", Storage="_Dictionary", ThisKey="ID", OtherKey="DictionaryNumber")]
		public EntitySet<Dictionary> Dictionary
		{
			get
			{
				return this._Dictionary;
			}
			set
			{
				this._Dictionary.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dictionary(Dictionary entity)
		{
			this.SendPropertyChanging();
			entity.DictionaryView = this;
		}
		
		private void detach_Dictionary(Dictionary entity)
		{
			this.SendPropertyChanging();
			entity.DictionaryView = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dictionary")]
	public partial class Dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DictionaryNumber;
		
		private string _Value;
		
		private bool _IsVisible;
		
		private EntityRef<DictionaryView> _DictionaryView;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDictionaryNumberChanging(int value);
    partial void OnDictionaryNumberChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public Dictionary()
		{
			this._DictionaryView = default(EntityRef<DictionaryView>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DictionaryNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DictionaryNumber
		{
			get
			{
				return this._DictionaryNumber;
			}
			set
			{
				if ((this._DictionaryNumber != value))
				{
					if (this._DictionaryView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDictionaryNumberChanging(value);
					this.SendPropertyChanging();
					this._DictionaryNumber = value;
					this.SendPropertyChanged("DictionaryNumber");
					this.OnDictionaryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DictionaryView_Dictionary", Storage="_DictionaryView", ThisKey="DictionaryNumber", OtherKey="ID", IsForeignKey=true)]
		public DictionaryView DictionaryView
		{
			get
			{
				return this._DictionaryView.Entity;
			}
			set
			{
				DictionaryView previousValue = this._DictionaryView.Entity;
				if (((previousValue != value) 
							|| (this._DictionaryView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DictionaryView.Entity = null;
						previousValue.Dictionary.Remove(this);
					}
					this._DictionaryView.Entity = value;
					if ((value != null))
					{
						value.Dictionary.Add(this);
						this._DictionaryNumber = value.ID;
					}
					else
					{
						this._DictionaryNumber = default(int);
					}
					this.SendPropertyChanged("DictionaryView");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectStatisticView")]
	public partial class ProjectStatisticView
	{
		
		private System.Nullable<int> _HightPriority;
		
		private System.Nullable<int> _Current;
		
		private System.Nullable<int> _Today;
		
		private System.Nullable<int> _Overstay;
		
		private System.Nullable<int> _Prepare;
		
		private System.Nullable<int> _Archive;
		
		private System.Nullable<int> _ProductionCompleted;
		
		public ProjectStatisticView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HightPriority", DbType="Int")]
		public System.Nullable<int> HightPriority
		{
			get
			{
				return this._HightPriority;
			}
			set
			{
				if ((this._HightPriority != value))
				{
					this._HightPriority = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current]", Storage="_Current", DbType="Int")]
		public System.Nullable<int> Current
		{
			get
			{
				return this._Current;
			}
			set
			{
				if ((this._Current != value))
				{
					this._Current = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Today", DbType="Int")]
		public System.Nullable<int> Today
		{
			get
			{
				return this._Today;
			}
			set
			{
				if ((this._Today != value))
				{
					this._Today = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Overstay", DbType="Int")]
		public System.Nullable<int> Overstay
		{
			get
			{
				return this._Overstay;
			}
			set
			{
				if ((this._Overstay != value))
				{
					this._Overstay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Prepare]", Storage="_Prepare", DbType="Int")]
		public System.Nullable<int> Prepare
		{
			get
			{
				return this._Prepare;
			}
			set
			{
				if ((this._Prepare != value))
				{
					this._Prepare = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Archive", DbType="Int")]
		public System.Nullable<int> Archive
		{
			get
			{
				return this._Archive;
			}
			set
			{
				if ((this._Archive != value))
				{
					this._Archive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionCompleted", DbType="Int")]
		public System.Nullable<int> ProductionCompleted
		{
			get
			{
				return this._ProductionCompleted;
			}
			set
			{
				if ((this._ProductionCompleted != value))
				{
					this._ProductionCompleted = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualProjectView")]
	public partial class ActualProjectView
	{
		
		private int _ProjectID;
		
		private short _ProjectPriority;
		
		private System.Nullable<System.DateTime> _ProjectDeadlineDate;
		
		private string _DeadLineaption;
		
		private string _ProjectCaption;
		
		private string _ProjectTypeName;
		
		private string _ContactName;
		
		private string _ContactPhone;
		
		private string _CustomerName;
		
		private float _ProjectProgress;
		
		private string _ResponsiblePerson;
		
		private string _LastStageName;
		
		private double _ProjectPrice;
		
		private double _ProjectPaid;
		
		private bool _IsHighPriority;
		
		private bool _IsToday;
		
		private bool _IsCurrent;
		
		private bool _IsOverstay;
		
		private bool _IsPrepare;
		
		private bool _IsArchive;
		
		private bool _IsProductionCompleted;
		
		public ActualProjectView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPriority", DbType="SmallInt NOT NULL")]
		public short ProjectPriority
		{
			get
			{
				return this._ProjectPriority;
			}
			set
			{
				if ((this._ProjectPriority != value))
				{
					this._ProjectPriority = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDeadlineDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProjectDeadlineDate
		{
			get
			{
				return this._ProjectDeadlineDate;
			}
			set
			{
				if ((this._ProjectDeadlineDate != value))
				{
					this._ProjectDeadlineDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeadLineaption", DbType="NVarChar(19)")]
		public string DeadLineaption
		{
			get
			{
				return this._DeadLineaption;
			}
			set
			{
				if ((this._DeadLineaption != value))
				{
					this._DeadLineaption = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCaption", DbType="NVarChar(60)")]
		public string ProjectCaption
		{
			get
			{
				return this._ProjectCaption;
			}
			set
			{
				if ((this._ProjectCaption != value))
				{
					this._ProjectCaption = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTypeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectTypeName
		{
			get
			{
				return this._ProjectTypeName;
			}
			set
			{
				if ((this._ProjectTypeName != value))
				{
					this._ProjectTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this._ContactName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(255)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this._ContactPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this._CustomerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectProgress", DbType="Real NOT NULL")]
		public float ProjectProgress
		{
			get
			{
				return this._ProjectProgress;
			}
			set
			{
				if ((this._ProjectProgress != value))
				{
					this._ProjectProgress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsiblePerson", DbType="NVarChar(255)")]
		public string ResponsiblePerson
		{
			get
			{
				return this._ResponsiblePerson;
			}
			set
			{
				if ((this._ResponsiblePerson != value))
				{
					this._ResponsiblePerson = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStageName", DbType="NVarChar(255)")]
		public string LastStageName
		{
			get
			{
				return this._LastStageName;
			}
			set
			{
				if ((this._LastStageName != value))
				{
					this._LastStageName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPrice", DbType="Float NOT NULL")]
		public double ProjectPrice
		{
			get
			{
				return this._ProjectPrice;
			}
			set
			{
				if ((this._ProjectPrice != value))
				{
					this._ProjectPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPaid", DbType="Float NOT NULL")]
		public double ProjectPaid
		{
			get
			{
				return this._ProjectPaid;
			}
			set
			{
				if ((this._ProjectPaid != value))
				{
					this._ProjectPaid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHighPriority", DbType="Bit")]
		public bool IsHighPriority
		{
			get
			{
				return this._IsHighPriority;
			}
			set
			{
				if ((this._IsHighPriority != value))
				{
					this._IsHighPriority = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsToday", DbType="Bit")]
		public bool IsToday
		{
			get
			{
				return this._IsToday;
			}
			set
			{
				if ((this._IsToday != value))
				{
					this._IsToday = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrent", DbType="Bit")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this._IsCurrent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOverstay", DbType="Bit")]
		public bool IsOverstay
		{
			get
			{
				return this._IsOverstay;
			}
			set
			{
				if ((this._IsOverstay != value))
				{
					this._IsOverstay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrepare", DbType="Bit")]
		public bool IsPrepare
		{
			get
			{
				return this._IsPrepare;
			}
			set
			{
				if ((this._IsPrepare != value))
				{
					this._IsPrepare = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsArchive", DbType="Bit")]
		public bool IsArchive
		{
			get
			{
				return this._IsArchive;
			}
			set
			{
				if ((this._IsArchive != value))
				{
					this._IsArchive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProductionCompleted", DbType="Bit")]
		public bool IsProductionCompleted
		{
			get
			{
				return this._IsProductionCompleted;
			}
			set
			{
				if ((this._IsProductionCompleted != value))
				{
					this._IsProductionCompleted = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectPivotView")]
	public partial class ProjectPivotView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _CustomerName;
		
		private string _ProjectCaption;
		
		private string _ProjectNote;
		
		private short _ProjectPriority;
		
		private int _ProjectType;
		
		private System.Nullable<int> _ProjectState;
		
		private string _ProjectResponsiblePerson;
		
		private System.Nullable<System.DateTime> _DeadLine;
		
		private double _ProjectPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnProjectCaptionChanging(string value);
    partial void OnProjectCaptionChanged();
    partial void OnProjectNoteChanging(string value);
    partial void OnProjectNoteChanged();
    partial void OnProjectPriorityChanging(short value);
    partial void OnProjectPriorityChanged();
    partial void OnProjectTypeChanging(int value);
    partial void OnProjectTypeChanged();
    partial void OnProjectStateChanging(System.Nullable<int> value);
    partial void OnProjectStateChanged();
    partial void OnProjectResponsiblePersonChanging(string value);
    partial void OnProjectResponsiblePersonChanged();
    partial void OnDeadLineChanging(System.Nullable<System.DateTime> value);
    partial void OnDeadLineChanged();
    partial void OnProjectPriceChanging(double value);
    partial void OnProjectPriceChanged();
    #endregion
		
		public ProjectPivotView()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCaption", DbType="NVarChar(255)")]
		public string ProjectCaption
		{
			get
			{
				return this._ProjectCaption;
			}
			set
			{
				if ((this._ProjectCaption != value))
				{
					this.OnProjectCaptionChanging(value);
					this.SendPropertyChanging();
					this._ProjectCaption = value;
					this.SendPropertyChanged("ProjectCaption");
					this.OnProjectCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectNote", DbType="NVarChar(4000)")]
		public string ProjectNote
		{
			get
			{
				return this._ProjectNote;
			}
			set
			{
				if ((this._ProjectNote != value))
				{
					this.OnProjectNoteChanging(value);
					this.SendPropertyChanging();
					this._ProjectNote = value;
					this.SendPropertyChanged("ProjectNote");
					this.OnProjectNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPriority", DbType="SmallInt NOT NULL")]
		public short ProjectPriority
		{
			get
			{
				return this._ProjectPriority;
			}
			set
			{
				if ((this._ProjectPriority != value))
				{
					this.OnProjectPriorityChanging(value);
					this.SendPropertyChanging();
					this._ProjectPriority = value;
					this.SendPropertyChanged("ProjectPriority");
					this.OnProjectPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectType", DbType="Int NOT NULL")]
		public int ProjectType
		{
			get
			{
				return this._ProjectType;
			}
			set
			{
				if ((this._ProjectType != value))
				{
					this.OnProjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ProjectType = value;
					this.SendPropertyChanged("ProjectType");
					this.OnProjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectState", DbType="Int")]
		public System.Nullable<int> ProjectState
		{
			get
			{
				return this._ProjectState;
			}
			set
			{
				if ((this._ProjectState != value))
				{
					this.OnProjectStateChanging(value);
					this.SendPropertyChanging();
					this._ProjectState = value;
					this.SendPropertyChanged("ProjectState");
					this.OnProjectStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectResponsiblePerson", DbType="NVarChar(255)")]
		public string ProjectResponsiblePerson
		{
			get
			{
				return this._ProjectResponsiblePerson;
			}
			set
			{
				if ((this._ProjectResponsiblePerson != value))
				{
					this.OnProjectResponsiblePersonChanging(value);
					this.SendPropertyChanging();
					this._ProjectResponsiblePerson = value;
					this.SendPropertyChanged("ProjectResponsiblePerson");
					this.OnProjectResponsiblePersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeadLine", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeadLine
		{
			get
			{
				return this._DeadLine;
			}
			set
			{
				if ((this._DeadLine != value))
				{
					this.OnDeadLineChanging(value);
					this.SendPropertyChanging();
					this._DeadLine = value;
					this.SendPropertyChanged("DeadLine");
					this.OnDeadLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPrice", DbType="Float NOT NULL")]
		public double ProjectPrice
		{
			get
			{
				return this._ProjectPrice;
			}
			set
			{
				if ((this._ProjectPrice != value))
				{
					this.OnProjectPriceChanging(value);
					this.SendPropertyChanging();
					this._ProjectPrice = value;
					this.SendPropertyChanged("ProjectPrice");
					this.OnProjectPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
